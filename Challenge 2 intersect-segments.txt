(defun intersect-segments(x1 y1 x2 y2 x3 y3 x4 y4)
  (let* ((area1 (- (* (- x1 x3) (- y2 y3))
                   (* (- y1 y3) (- x2 x3))))
         (area2 (- (* (- x1 x4) (- y2 y4))
                   (* (- y1 y4) (- x2 x4))))
         (area3 (- (* (- x3 x1) (- y4 y1))
                   (* (- y3 y1) (- x4 x1))))
         (area4 (- (+ area3 area1) area2)))
    (cond ((= 0 area1 area2 area3 area4)
          (intersect-inaline x1 y1 x2 y2 x3 y3 x4 y4))
          ((or (= 0 (* area1 area2)) (= 0 (* area3 4))) 
           (intersect-inadot area1 area2 area3 area4 x1 y1 x2 y2 x3 y3 x4 y4))
          ((or (> (* area1 area2) 0) (> (* area3 area4) 0)) nil)
          (t (intersect-cross area1 area2 area3 x1 y1 x2 y2)))))
                                 
(defun intersect-inaline(x1 y1 x2 y2 x3 y3 x4 y4)
  (cond ((and (> x3 x1) (> x3 x2) (> x4 x1) (> x4 x2)) nil)
        ((setf lst (sort (list (list x1 y1) (list x2 y2) (list x3 y3) (list x4 y4)) #'> :key #'car))
         (values  (car (caddr lst)) (cadr (caddr lst)) (car (cadr lst)) (cadr (cadr lst))))))

(defun intersect-inadot(area1 area2 area3 area4 x1 y1 x2 y2 x3 y3 x4 y4)
  (cond((eql 0 area1) (values x3 y3))
        ((eql 0 area2) (values x4 y4))
        ((eql 0 area3) (values x1 y1))
        (t (values x2 y2))))
    
(defun intersect-cross(area1 area2 area3 x1 y1 x2 y2)
  (let* ((n (/ area3 (- area2 area1)))
         (dx (* n (- x2 x1)))
         (dy (* n (- y2 y1))))
    (values (+ x1 dx) (+ y1 dy))))
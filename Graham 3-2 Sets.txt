(1)
(defun stable-union(lst1 lst2)
  (let ((a nil))
    (do ((lst3 lst2 (cdr lst3)))
        ((null lst3) (append lst1 (reverse a)))
      (cond((member (car lst3) (intersection lst1 lst2)) a)
            (t (push (car lst3) a))))))
(2)
(defun stable-intersection( lst1 lst2)
  (let ((a nil))
    (do ((lst3 lst1 (cdr lst3)))
        ((null lst3) (reverse a))
      (cond ((member (car lst3) lst2) (push (car lst3) a))
            (t a)))))
(3)
(defun stable-set-difference(lst1 lst2)
  (let ((a nil))
    (do ((lst3 lst1 (cdr lst3)))
        ((null lst3) (reverse a))
      (cond ((member (car lst3) lst2) a)
            (t  (push (car lst3) a))))))